---
// Astro component
---

<>
  <section class="avenue-messenger overflow-hidden">
    <div class="chat flex h-[500px] flex-col justify-between">
      <div class="chat-title flex-none border-b border-neutral-300 p-4 text-center">
        <h1 class="text-base font-normal text-neutral-100">Glowy</h1>
        <h2 class="text-xs tracking-wider text-neutral-100">online</h2>
      </div>

      <div class="messages relative flex-1 overflow-hidden">
        <div
          class="messages-content absolute left-0 top-0 h-full w-full space-y-4 overflow-y-auto p-4"
        >
        </div>
      </div>

      <div
        class="message-box mx-auto mb-4 flex w-11/12 flex-none items-center rounded-2xl border border-neutral-300 p-2"
      >
        <textarea
          class="message-input h-8 flex-1 resize-none bg-transparent px-2 text-base text-neutral-100 outline-none"
          placeholder="Type message..."></textarea>
        <button
          class="message-submit rounded-md px-3 py-1 text-accent-purple-500 transition-colors hover:text-neutral-700"
        >
          Send
        </button>
      </div>
    </div>
  </section>

  <style>
    .typing-indicator {
      display: flex;
      align-items: center;
      background-color: #f3f4f6;
      border-radius: 20px;
      padding: 10px;
      max-width: 70px;
      margin-left: 10px;
    }
    .typing-indicator span {
      height: 8px;
      width: 8px;
      background-color: #9ca3af;
      border-radius: 50%;
      margin: 0 3px;
      animation: typing-bounce 1.4s infinite ease-in-out;
    }
    .typing-indicator span:nth-child(2) {
      animation-delay: 0.2s;
    }
    .typing-indicator span:nth-child(3) {
      animation-delay: 0.4s;
    }
    @keyframes typing-bounce {
      0%,
      80%,
      100% {
        transform: translateY(0);
        opacity: 0.5;
      }
      40% {
        transform: translateY(-5px);
        opacity: 1;
      }
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const messagesContent = document.querySelector('.messages-content') as HTMLDivElement;
      const messageInput = document.querySelector('.message-input') as HTMLTextAreaElement;
      const messageSubmit = document.querySelector('.message-submit') as HTMLButtonElement;

      const fakeMessages = [
        "Hi there, I'm Glowy and you?",
        'Nice to meet you',
        'How are you?',
        'Not too bad, thanks',
        'What do you do?',
        "That's awesome",
        'Codepen is a nice place to stay',
        "I think you're a nice person",
        'Why do you think that?',
        'Can you explain?',
        "Anyway I've gotta go now",
        'It was a pleasure chat with you',
        'Time to make a new codepen',
        'Bye',
        ':)',
      ];

      let currentMessageIndex = 0;

      function createTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.classList.add(
          'message',
          'message-received',
          'self-start',
          'typing-indicator-container',
          'flex',
          'items-center'
        );

        const typingIndicator = document.createElement('div');
        typingIndicator.classList.add('typing-indicator');

        for (let i = 0; i < 3; i++) {
          const dot = document.createElement('span');
          dot.classList.add('typing-dot');
          typingIndicator.appendChild(dot);
        }

        typingDiv.appendChild(typingIndicator);
        return typingDiv;
      }

      function setDate() {
        const date = new Date();
        const hours = date.getHours();
        const minutes = date.getMinutes();
        const lastMessage = messagesContent.lastElementChild as HTMLDivElement | null;

        if (lastMessage) {
          const timestampDiv = document.createElement('div');
          timestampDiv.classList.add(
            'timestamp',
            'absolute',
            'bottom-[-15px]',
            'text-xs',
            'text-neutral-500',
            'right-8'
          );
          timestampDiv.textContent = `${hours}:${minutes < 10 ? '0' : ''}${minutes}`;
          lastMessage.appendChild(timestampDiv);

          const checkmarkSent = document.createElement('div');
          checkmarkSent.classList.add(
            'checkmark-sent-delivered',
            'absolute',
            'bottom-[-15px]',
            'right-2',
            'text-xs',
            'text-neutral-500'
          );
          checkmarkSent.innerHTML = '&#10004;';
          lastMessage.appendChild(checkmarkSent);

          const checkmarkRead = document.createElement('div');
          checkmarkRead.classList.add(
            'checkmark-read',
            'absolute',
            'bottom-[-15px]',
            'right-4',
            'text-xs',
            'text-accent-purple-500'
          );
          checkmarkRead.innerHTML = '&#10004;';
          lastMessage.appendChild(checkmarkRead);
        }
      }

      function scrollToBottom() {
        messagesContent.scrollTop = messagesContent.scrollHeight;
      }

      function insertPersonalMessage(msg: string) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add(
          'message',
          'message-personal',
          'self-end',
          'bg-accent-purple-900',
          'border',
          'border-accent-purple-200',
          'p-2',
          'rounded-2xl',
          'rounded-tr-none',
          'max-w-[80%]',
          'relative',
          'ml-auto'
        );
        messageDiv.textContent = msg;
        messagesContent.appendChild(messageDiv);
        setDate();
        scrollToBottom();
        return messageDiv;
      }

      function insertFakeMessage() {
        // Remove previous typing indicator if it exists
        const existingTypingIndicator = messagesContent.querySelector(
          '.typing-indicator-container'
        );
        if (existingTypingIndicator) {
          existingTypingIndicator.remove();
        }

        // Add typing indicator
        const typingIndicator = createTypingIndicator();
        messagesContent.appendChild(typingIndicator);
        scrollToBottom();

        // Simulate typing with setTimeout
        setTimeout(() => {
          // Remove typing indicator
          typingIndicator.remove();

          const messageDiv = document.createElement('div');
          messageDiv.classList.add(
            'message',
            'message-received',
            'self-start',
            'bg-neutral-900',
            'border',
            'border-neutral-200',
            'p-2',
            'rounded-2xl',
            'rounded-tl-none',
            'max-w-[80%]',
            'relative'
          );

          // Get next unique message
          const messageToSend = fakeMessages[currentMessageIndex];
          messageDiv.textContent = messageToSend;

          // Increment message index, wrapping around the array
          currentMessageIndex = (currentMessageIndex + 1) % fakeMessages.length;

          messagesContent.appendChild(messageDiv);
          setDate();
          scrollToBottom();
        }, 1500); // Typing animation duration
      }

      // Send first message when page loads
      setTimeout(() => {
        insertFakeMessage();
      }, 1000);

      messageSubmit.addEventListener('click', () => {
        const msg = messageInput.value.trim();
        if (msg) {
          insertPersonalMessage(msg);
          messageInput.value = '';
          setTimeout(() => {
            insertFakeMessage();
          }, 1000);
        }
      });

      messageInput.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          messageSubmit.click();
        }
      });
    });
  </script>
</>
