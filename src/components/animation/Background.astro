---

---

<div class="h-full w-full">
  <canvas id="shader-canvas" class="h-full w-full"></canvas>
</div>

<script type="module">
  // GLSL Vertex Shader
  const vertexShaderSource = `
      attribute vec3 position;
  
      void main() {
        gl_Position = vec4(position, 1.0);
      }
      `;

  // GLSL Fragment Shader
  const fragmentShaderSource = `
      precision highp float;
  
      uniform vec2 resolution;
      uniform float time;
      uniform float xScale;
      uniform float yScale;
      uniform float distortion;
  
      void main() {
        vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);
        
        float d = length(p) * distortion;
  
        float rx = p.x * (0.5 + d);
        float gx = p.x * (0.5 + d);
        float bx = p.x * (0.7 - d);
  
        float r = 0.07 / abs(p.y + sin((rx + time) * xScale) * yScale);
        float g = 0.05 / abs(p.y + sin((gx + time) * xScale) * yScale);
        float b = 0.07 / abs(p.y + sin((bx + time) * xScale) * yScale);
  
        gl_FragColor = vec4(r, g, b, 1.0);
      }
      `;

  // Initialize WebGL
  const canvas = document.getElementById('shader-canvas');
  const gl = canvas.getContext('webgl');

  // Resize canvas to fill the screen
  const resizeCanvas = () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
  };
  resizeCanvas();
  window.addEventListener('resize', resizeCanvas);

  // Compile shader
  const compileShader = (source, type) => {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      console.error(gl.getShaderInfoLog(shader));
      gl.deleteShader(shader);
      return null;
    }
    return shader;
  };

  const vertexShader = compileShader(vertexShaderSource, gl.VERTEX_SHADER);
  const fragmentShader = compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);

  // Create program
  const program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.error(gl.getProgramInfoLog(program));
    gl.deleteProgram(program);
  }
  gl.useProgram(program);

  // Define geometry
  const vertices = new Float32Array([
    -1.0, -1.0, 0.0, 1.0, -1.0, 0.0, -1.0, 1.0, 0.0, 1.0, -1.0, 0.0, -1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
  ]);

  const positionBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

  const positionLocation = gl.getAttribLocation(program, 'position');
  gl.enableVertexAttribArray(positionLocation);
  gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);

  // Set up uniforms
  const resolutionLocation = gl.getUniformLocation(program, 'resolution');
  const timeLocation = gl.getUniformLocation(program, 'time');
  const xScaleLocation = gl.getUniformLocation(program, 'xScale');
  const yScaleLocation = gl.getUniformLocation(program, 'yScale');
  const distortionLocation = gl.getUniformLocation(program, 'distortion');

  gl.uniform2f(resolutionLocation, canvas.width, canvas.height);
  gl.uniform1f(xScaleLocation, 1.0);
  gl.uniform1f(yScaleLocation, 0.3);
  gl.uniform1f(distortionLocation, 0.05);

  // Render loop
  let startTime = performance.now();
  const render = (time) => {
    gl.clear(gl.COLOR_BUFFER_BIT);
    gl.uniform1f(timeLocation, (time - startTime) * 0.0005);
    gl.uniform2f(resolutionLocation, canvas.width, canvas.height);

    gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 3);
    requestAnimationFrame(render);
  };

  render(startTime);
</script>
